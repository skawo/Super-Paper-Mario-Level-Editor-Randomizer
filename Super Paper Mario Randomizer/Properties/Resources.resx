<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="not_spm_iso" xml:space="preserve">
    <value>This does not seem to be a Super Paper Mario ISO. Extract anyway?</value>
  </data>
  <data name="folder_will_be_overwritten_title" xml:space="preserve">
    <value>Folder exists</value>
  </data>
  <data name="select_setup_folder" xml:space="preserve">
    <value>Select the "setup" folder extracted from a Super Paper Mario ISO.</value>
  </data>
  <data name="select_iso_extract_dir" xml:space="preserve">
    <value>Select directory to extract this ISO to...</value>
  </data>
  <data name="loading_stages" xml:space="preserve">
    <value>Loading stages...</value>
  </data>
  <data name="setup_file_invalid" xml:space="preserve">
    <value>Not a valid Super Paper Mario level file.</value>
  </data>
  <data name="saving_sages" xml:space="preserve">
    <value>Saving stages...</value>
  </data>
  <data name="folder_will_be_overwritten" xml:space="preserve">
    <value>Folder will be overwritten. Continue?</value>
  </data>
  <data name="done" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="err_extract_failed" xml:space="preserve">
    <value>There was an error extracting the ISO.</value>
  </data>
  <data name="spm_titlecode" xml:space="preserve">
    <value>R8P</value>
  </data>
  <data name="saving_err" xml:space="preserve">
    <value>Saving failed.</value>
  </data>
  <data name="saving_iso" xml:space="preserve">
    <value>Saving ISO...</value>
  </data>
  <data name="select_setup_file" xml:space="preserve">
    <value>Select a Super Paper Mario setup file.</value>
  </data>
  <data name="extracting_iso" xml:space="preserve">
    <value>Extracting ISO...</value>
  </data>
  <data name="file_will_be_overwritten_title" xml:space="preserve">
    <value>File exists</value>
  </data>
  <data name="files_changed_save" xml:space="preserve">
    <value>Files were changed. Save folder?</value>
  </data>
  <data name="select_outf" xml:space="preserve">
    <value>Select folder to save the ISO in.</value>
  </data>
  <data name="no_align_files" xml:space="preserve">
    <value>Did not find "align-files.txt", without which the game will crash. Use the "Extract ISO" option to get the file. Aborting.</value>
  </data>
  <data name="data_not_found" xml:space="preserve">
    <value>This folder doesn't seem to contain the Super Paper Mario files...</value>
  </data>
  <data name="isoselect_filter" xml:space="preserve">
    <value>ISO files (*.iso)|*.iso|WBFS files (*.wbfs)|*.wbfs</value>
  </data>
  <data name="select_exported" xml:space="preserve">
    <value>Select exported Super Paper Mario ISO.</value>
  </data>
  <data name="select_spm_iso" xml:space="preserve">
    <value>Select a Super Paper Mario ISO...</value>
  </data>
  <data name="file_will_be_overwritten" xml:space="preserve">
    <value>File will be overwritten. Continue?</value>
  </data>
  <data name="alert" xml:space="preserve">
    <value>Warning</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Blue_question_mark_icon.svg" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Blue_question_mark_icon.svg.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="presetsf_filter" xml:space="preserve">
    <value>JSON files (*.json)|*.json</value>
  </data>
  <data name="select_preset" xml:space="preserve">
    <value>Select preset...</value>
  </data>
  <data name="select_presetsf" xml:space="preserve">
    <value>Save where?</value>
  </data>
  <data name="randomizing" xml:space="preserve">
    <value>Randomizing...</value>
  </data>
  <data name="not_spm_iso_title" xml:space="preserve">
    <value>Titlecode mismatch</value>
  </data>
</root>